#!/bin/sh
# Copyright 2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

# libc resolv.conf updater

# Written by Roy Marples (uberlord@gentoo.org)
# Heavily based on Debian resolvconf by Thomas Hood

[ "$(readlink /etc/resolv.conf 2>/dev/null)" \
	!= "resolvconf/run/resolv.conf" ] && exit 0

RESOLVCONF="$(resolvconf -l)"
BASE="/etc/resolvconf/resolv.conf.d/base"

uniqify() {
    local result=
    while [ -n "$1" ] ; do
		case " ${result} " in
			*" $1 "*) ;;
			*) result="${result} $1" ;;
		esac
		shift
	done
    echo "${result# *}"
}

OUR_NS=
if [ -e "${BASE}" ] ; then
	OUR_NS="$(sed -n -e 's/^[[:space:]]*nameserver[[:space:]]*//p' "${BASE}")"
fi
OUR_NS="$(uniqify \
	${OUR_NS} \
	$(echo "${RESOLVCONF}" \
	| sed -n -e 's/^[[:space:]]*nameserver[[:space:]]*//p') \
)"

# libc only allows for 3 nameservers
# truncate after 127 as well
i=0
NS=
LOCALH=false
for N in ${OUR_NS} ; do
	i=$((${i} + 1))
	NS="${NS} ${N}"
	[ "${i}" = "3" ] && break
	case "${N}" in
		127.*) LOCALH=true; break ;;
	esac
done

# This is nasty!
# If we have a local nameserver then assume they are intelligent enough
# to be forwarding domain requests to the correct nameserver and not search
# ones. This means we prefer search then domain, otherwise, we use them in
# the order given to us.
OUR_SEARCH=
if ${LOCALH} ; then
	if [ -e "${BASE}" ] ; then
		OUR_SEARCH="$(sed -n -e 's/^[[:space:]]*search[[:space:]]*//p' "${BASE}")"
	fi
	OUR_SEARCH="${OUR_SEARCH} $(echo "${RESOLVCONF}" \
		| sed -n 's/^[[:space:]]*search[[:space:]]*//p')"
	if [ -e "${BASE}" ] ; then
		OUR_SEARCH="${OUR_SEARCH} $(sed -n -e 's/^[[:space:]]*domain[[:space:]]*//p' "${BASE}")"
	fi
	OUR_SEARCH="${OUR_SEARCH} $( echo "${RESOLVCONF}" \
		| sed -n -e 's/^[[:space:]]*domain[[:space:]]*//p')"
else
	if [ -e "${BASE}" ] ; then
		OUR_SEARCH="$(sed -n -e 's/^[[:space:]]*search[[:space:]]*//p' \
			-e 's/^[[:space:]]*domain[[:space:]]*//p' "${BASE}")"
	fi
	OUR_SEARCH="${OUR_SEARCH} $(echo "${RESOLVCONF}" \
		| sed -n -e 's/^[[:space:]]*search[[:space:]]*//p' \
			-e 's/^[[:space:]]*domain[[:space:]]*//p')"
fi

# libc only allows for 6 search domains 
i=0
SEARCH=
for S in $(uniqify ${OUR_SEARCH}) ; do
	i=$((${i} + 1))
	SEARCH="${SEARCH} ${S}"
	[ "${i}" = "6" ] && break
done
[ -n "${SEARCH}" ] && SEARCH="search${SEARCH}"

# Hold our new resolv.conf in a variable to save on temporary files
NEWCONF="# Generated by resolvconf\n"
[ -e /etc/resolvconf/resolv.conf.d/head ] \
	&& NEWCONF="${NEWCONF}$(cat /etc/resolvconf/resolv.conf.d/head)\n"
[ -n "${SEARCH}" ] && NEWCONF="${NEWCONF}${SEARCH}\n"
for N in ${NS} ; do
	NEWCONF="${NEWCONF}nameserver ${N}\n"
done

# Now dump everything else from our resolvs
if [ -e "${BASE}" ] ; then
	NEWCONF="${NEWCONF}$(sed -e '/^[[:space:]]*$/d' \
		-e '/^[[:space:]]*nameserver[[:space:]]*.*/d' \
		-e '/^[[:space:]]*search[[:space:]]*.*/d' \
		-e '/^[[:space:]]*domain[[:space:]]*.*/d' \
		"${BASE}")" 
fi

# We don't know we're using GNU sed, so we do it like this
NEWCONF="${NEWCONF}$(echo "${RESOLVCONF}" | sed -e '/^[[:space:]]*$/d' \
	-e '/^[[:space:]]*#/d' \
	-e '/^[[:space:]]*nameserver[[:space:]]*.*/d' \
	-e '/^[[:space:]]*search[[:space:]]*.*/d' \
	-e '/^[[:space:]]*domain[[:space:]]*.*/d' \
	)"
[ -e /etc/resolvconf/resolv.conf.d/tail ] \
	&& NEWCONF="${NEWCONF}$(cat /etc/resolvconf/resolv.conf.d/tail)"

# Check if the file has actually changed or not
if [ -e /etc/resolv.conf ] ; then
	[ "$(cat /etc/resolv.conf)" = "$(printf "${NEWCONF}")" ] && exit 0
fi

# Create our resolv.conf now
printf "${NEWCONF}" > /etc/resolvconf/run/resolv.conf

# Restart nscd if it's running
if [ -x /etc/init.d/nscd ] ; then
	/etc/init.d/nscd --nodeps --quiet conditionalrestart
fi

# Notify users of the resolver
for x in /etc/resolvconf/update-libc.d/* ; do
	[ -e "${x}" ] && "${x}" "$@"
done

# vim: ts=4 :
